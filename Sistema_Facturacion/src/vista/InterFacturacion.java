package vista;

import java.util.Date;
import java.text.SimpleDateFormat;
import java.awt.Dimension;
import static java.awt.image.ImageObserver.WIDTH;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import sistema_facturacion.Conexion;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.detalle_factura;
import java.util.ArrayList;
import controlador.Ctrl_RegistrarFacturas;
import modelo.Facturas;


public class InterFacturacion extends javax.swing.JInternalFrame {
    private DefaultTableModel modeloDatosProductos;
    
    ArrayList<detalle_factura> listaProducto= new ArrayList<>();
    private detalle_factura producto;
    
    private int idCliente=0;
    private int idProducto=0;
    private String nombre="";
    private int cantidadProducto=0;
    private double precioUnitario=0.0;
    private int porcentajeIva=0;
    
    private int cantidad=0;
    private double subtotal=0.0;
    private double descuento=0.0;
    private double iva=0.0;
    private double totalPagar=0.0;
    
    private double subtotalGeneral=0.0;
    private double descuentoGeneral=0.0;
    private double ivaGeneral=0.0;
    private double totalPagarGeneral=0.0;
    
    
    private int auxIdDetalle=1;
    

    public InterFacturacion() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturacion");
        
        this.CargarComboClientes();
        this.CargarComboProductos();
        
        this.inicializarTablaProducto();
        
        txt_efectivo.setEnabled(false);
        jButton_calcular_cambio.setEnabled(false);
        
        txt_subtotal.setText("0.0");
        txt_iva.setText("0.0");
        txt_descuento.setText("0.0");
        txt_total_pagar.setText("0.0");
        
        
         //insertar imagen en nuestro JLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();
    }
    
    private void inicializarTablaProducto(){
        modeloDatosProductos = new DefaultTableModel();
        modeloDatosProductos.addColumn("N");
        modeloDatosProductos.addColumn("Nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("P.Unitario");
        modeloDatosProductos.addColumn("Subtotal");
        modeloDatosProductos.addColumn("Descuento");
        modeloDatosProductos.addColumn("Iva");
        modeloDatosProductos.addColumn("Total Pagar");
        modeloDatosProductos.addColumn("Accion");
        
        this.jTable_productos.setModel(modeloDatosProductos);
    }
    private void listaTablaProductos(){
        this.modeloDatosProductos.setRowCount(listaProducto.size());
        for(int i=0; i<listaProducto.size(); i++){
            this.modeloDatosProductos.setValueAt(i + 1 , i, 0);
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getNombre(),i , 1 );
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getCantidad(),i , 2 );
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getPrecio(),i , 3 );
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getSubtotal(),i , 4 );
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getDescuento(),i , 5 );
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getIva(),i , 6 );
            this.modeloDatosProductos.setValueAt(listaProducto.get(i).getTotalPagar(),i , 7 );
            this.modeloDatosProductos.setValueAt("Eliminar", i,8);
            
        }
        jTable_productos.setModel(modeloDatosProductos);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_cliente = new javax.swing.JComboBox<>();
        jComboBox_producto = new javax.swing.JComboBox<>();
        txt_cliente_buscar = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        jButton_busca_cliente = new javax.swing.JButton();
        jButton_añadir_producto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_subtotal = new javax.swing.JTextField();
        txt_descuento = new javax.swing.JTextField();
        txt_iva = new javax.swing.JTextField();
        txt_total_pagar = new javax.swing.JTextField();
        txt_efectivo = new javax.swing.JTextField();
        txt_cambio = new javax.swing.JTextField();
        jButton_calcular_cambio = new javax.swing.JButton();
        jButton_RegistrarVenta = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Facturación");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Producto:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 80, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cantidad:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 80, -1));

        jComboBox_cliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione cliente:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 170, -1));

        jComboBox_producto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, -1));

        txt_cliente_buscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_cliente_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 150, -1));

        txt_cantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 60, -1));

        jButton_busca_cliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_busca_cliente.setText("Buscar");
        jButton_busca_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_busca_clienteActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_busca_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 80, -1));

        jButton_añadir_producto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_añadir_producto.setText("Añadir Productos");
        jButton_añadir_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_añadir_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_añadir_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 150, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_productosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 760, 210));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Subtotal:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Descuento:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Iva:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Total a pagar:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Efectivo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Cambio:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        txt_subtotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_subtotal.setEnabled(false);
        jPanel2.add(txt_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 120, -1));

        txt_descuento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_descuento.setEnabled(false);
        jPanel2.add(txt_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 120, -1));

        txt_iva.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_iva.setEnabled(false);
        jPanel2.add(txt_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 120, -1));

        txt_total_pagar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_total_pagar.setEnabled(false);
        jPanel2.add(txt_total_pagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 120, -1));

        txt_efectivo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel2.add(txt_efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 120, -1));

        txt_cambio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_cambio.setEnabled(false);
        jPanel2.add(txt_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 120, -1));

        jButton_calcular_cambio.setBackground(new java.awt.Color(51, 255, 255));
        jButton_calcular_cambio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_calcular_cambio.setText("Calcular Cambio");
        jButton_calcular_cambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calcular_cambioActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_calcular_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 130, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 380, 210));

        jButton_RegistrarVenta.setBackground(new java.awt.Color(51, 255, 255));
        jButton_RegistrarVenta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_RegistrarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/impresora.png"))); // NOI18N
        jButton_RegistrarVenta.setText("Registrar Venta");
        jButton_RegistrarVenta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_RegistrarVenta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_RegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RegistrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_RegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 170, 100));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_busca_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_busca_clienteActionPerformed
        // TODO add your handling code here:
        String clienteBuscar = txt_cliente_buscar.getText().trim();
        Connection cn = sistema_facturacion.Conexion.conectaBD();
        String sql = "select nombre, apellido from cliente where cedula= '"+ clienteBuscar+ "'"; 
        Statement st;
        try{
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if(rs.next()){
                jComboBox_cliente.setSelectedItem(rs.getString("nombre")+" " + rs.getString("apellido"));
            }else{
                jComboBox_cliente.setSelectedItem("Seleccione cliente");
                JOptionPane.showMessageDialog(null, "Cedula Incorrecta");
                
            }
            txt_cliente_buscar.setText("");
            cn.close();
        }catch (SQLException e){
            System.out.println("Error al buscar cliente"+e);
        }
    }//GEN-LAST:event_jButton_busca_clienteActionPerformed

    private void jButton_añadir_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_añadir_productoActionPerformed
        String combo = this.jComboBox_producto.getSelectedItem().toString();
        
        if(combo.equalsIgnoreCase("Seleccione producto")){
            JOptionPane.showMessageDialog(null,"Selleccione un producto");
        }else{
            if(!txt_cantidad.getText().isEmpty()){
                boolean validacion = validar(txt_cantidad.getText());
                if(validacion == true){
                    if(Integer.parseInt(txt_cantidad.getText())>0){
                        cantidad=Integer.parseInt(txt_cantidad.getText());
                        this.DatosDelProducto();
                        if(cantidad <= cantidadProducto){
                            subtotal = precioUnitario * cantidad;
                            totalPagar = subtotal +iva+descuento;
                            
                            subtotal = (double)Math.round(subtotal*100)/100;
                            iva = (double)Math.round(iva*100)/100;
                            descuento = (double)Math.round(descuento*100)/100;
                            totalPagar = (double)Math.round(totalPagar*100)/100;
                            
                            producto = new detalle_factura(auxIdDetalle, 
                                    1,
                                    idProducto,
                                    nombre,
                                    Integer.parseInt(txt_cantidad.getText()),
                                    precioUnitario,
                                    subtotal,
                                    descuento,
                                    iva,
                                    totalPagar,
                                    1
                            );
                            
                            listaProducto.add(producto);
                                JOptionPane.showMessageDialog(null,"Producto agregado"); 
                                auxIdDetalle++;
                                txt_cantidad.setText("");
                                this.CargarComboProductos();
                                this.CalcularTotalPagar();
                                txt_efectivo.setEnabled(true);
                                jButton_calcular_cambio.setEnabled(true);
                                
                            
                        }else{
                        JOptionPane.showMessageDialog(null,"Cantidad supera al stock");
                        }
                    }else{
                        JOptionPane.showMessageDialog(null,"Cantidad Invalida");
                    }
                }else{
                    JOptionPane.showMessageDialog(null,"No se admiten caracteres");
                }
            }else{
                JOptionPane.showMessageDialog(null,"Ingrese la cantidad de productos");
            }
        }
        this.listaTablaProductos();
    }//GEN-LAST:event_jButton_añadir_productoActionPerformed

    private void jButton_calcular_cambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calcular_cambioActionPerformed
        if(!txt_efectivo.getText().isEmpty()){
            boolean validacion = validarDouble(txt_efectivo.getText());
            if(validacion == true){
                double efc =Double.parseDouble(txt_efectivo.getText().trim());
                double top =Double.parseDouble(txt_total_pagar.getText().trim());
                
                if(efc < top){
                    JOptionPane.showMessageDialog(null,"Dinero insuficiente");
                    
                }else{
                    double cambio = (efc-top);
                    double cambi =(double)Math.round(cambio*100d)/100;
                    String camb = String.valueOf(cambi);
                    txt_cambio.setText(camb);
                }
            }else{
                JOptionPane.showMessageDialog(null,"No se admiten caracteres");
            }
        }else{
            JOptionPane.showMessageDialog(null,"Ingrese dinero en efectivo");
        }
    }//GEN-LAST:event_jButton_calcular_cambioActionPerformed
    int idArrayList=0;
    private void jTable_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_productosMouseClicked
        int fila_point=jTable_productos.rowAtPoint(evt.getPoint());
        int columna_point=0;
        
        if(fila_point > -1){
            idArrayList = (int) modeloDatosProductos.getValueAt(fila_point, columna_point);
            
        }
        int opcion = JOptionPane.showConfirmDialog(null, "Eliminar Producto");
        
        switch (opcion){
            case 0:
                listaProducto.remove(idArrayList - 1);
                this.CalcularTotalPagar();
                this.listaTablaProductos();
                break;
            case 1:
                break;
            default: 
                break;
                
        }
    }//GEN-LAST:event_jTable_productosMouseClicked

    private void jButton_RegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RegistrarVentaActionPerformed
        Facturas factura = new Facturas();
        detalle_factura detalle = new detalle_factura();
        Ctrl_RegistrarFacturas control = new Ctrl_RegistrarFacturas();
        
        String fecha="";
        Date date=new Date();
        fecha = new SimpleDateFormat("yyyy/MM/dd").format(date);
        
        if(!jComboBox_cliente.getSelectedItem().equals("Seleccione cliente: ")){
            if(listaProducto.size()>0){
                this.ObtenerIdCliente();
                
                factura.setId_factura(0);
                factura.setId_cliente(idCliente);
                factura.setValorPagar(Double.parseDouble(txt_total_pagar.getText()));
                factura.setFecha(fecha);
                factura.setEstado(1);
                
                if(control.guardar(factura)){
                    JOptionPane.showMessageDialog(null,"Factura Registrada ");
                    
                    for(detalle_factura elemento: listaProducto){
                        detalle.setId_detalleFacturas(0);
                        detalle.setId_factura(0);
                        detalle.setId_producto(elemento.getId_producto());
                        detalle.setCantidad(elemento.getCantidad());
                        detalle.setPrecio(elemento.getPrecio());
                        detalle.setSubtotal(elemento.getSubtotal());
                        detalle.setDescuento(elemento.getDescuento());
                        detalle.setIva(elemento.getIva());
                        detalle.setTotalPagar(elemento.getTotalPagar());
                        detalle.setEstado(1);
                        
                        if(control.guardarDetalle(detalle)){
                            
                            System.out.println("Detalle de la Factura Guardado");
                            txt_subtotal.setText("0.0");
                            txt_iva.setText("0.0");
                            txt_descuento.setText("0.0");
                            txt_total_pagar.setText("0.0");
                            txt_efectivo.setText("0.0");
                            txt_cambio.setText("0.0");
                            auxIdDetalle=1;
                            
                            this.CargarComboClientes();
                            this.RestarStock(elemento.getId_producto(),elemento.getCantidad());
                            
                        }else{
                            JOptionPane.showMessageDialog(null,"Error al guardar detalle");
                        }
                    }
                    listaProducto.clear();
                    listaTablaProductos();
                    
                }else{
                    JOptionPane.showMessageDialog(null,"Error al guardar factura");
                }
                
            }else{
                JOptionPane.showMessageDialog(null,"Seleccione un producto ");
            }
        }else{
            JOptionPane.showMessageDialog(null,"Seleccione un cliente ");
        }
        
        
    }//GEN-LAST:event_jButton_RegistrarVentaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_RegistrarVenta;
    private javax.swing.JButton jButton_añadir_producto;
    private javax.swing.JButton jButton_busca_cliente;
    private javax.swing.JButton jButton_calcular_cambio;
    private javax.swing.JComboBox<String> jComboBox_cliente;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_cliente_buscar;
    private javax.swing.JTextField txt_descuento;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_iva;
    private javax.swing.JTextField txt_subtotal;
    private javax.swing.JTextField txt_total_pagar;
    // End of variables declaration//GEN-END:variables

    private void CargarComboClientes(){
        Connection cn = sistema_facturacion.Conexion.conectaBD();
        String sql = "select * from cliente";
        Statement st;
        
        try{
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_cliente.removeAllItems();
            jComboBox_cliente.addItem("Seleccione cliente: ");
            while(rs.next()){
                jComboBox_cliente.addItem(rs.getString("nombre")+ " "+ rs.getString("apellido"));
            }
            cn.close();
            
        }catch (SQLException e){
            System.out.println("Error al cargar clientes "+e);
        }
    }
    private void CargarComboProductos(){
        Connection cn = sistema_facturacion.Conexion.conectaBD();
        String sql = "select * from productos";
        Statement st;
        
        try{
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("Seleccione producto: ");
            while(rs.next()){
                jComboBox_producto.addItem(rs.getString("nombre"));
            }
            cn.close();
            
        }catch (SQLException e){
            System.out.println("Error al cargar productos "+e);
        }
    }
    private boolean validar(String valor){
        try{
            int num = Integer.parseInt(valor);
            return true;
        }catch(NumberFormatException e){
            return false;
        }
    }
    private boolean validarDouble(String valor){
        try{
            double num = Double.parseDouble(valor);
            return true;
        }catch(NumberFormatException e){
            return false;
        }
    }
    private void DatosDelProducto(){
        try{
            String sql="select * from productos where nombre = '"+this.jComboBox_producto.getSelectedItem()+"'";
            Connection cn = sistema_facturacion.Conexion.conectaBD();
            Statement st;
            st=cn.createStatement();
            ResultSet rs =st.executeQuery(sql);
            while(rs.next()){
                idProducto=rs.getInt("id_producto");
                nombre=rs.getString("nombre");
                cantidadProducto=rs.getInt("cantidad");
                precioUnitario=rs.getDouble("precio");
                porcentajeIva =rs.getInt("porcentajeIva");
                this.CalcularIva(precioUnitario, porcentajeIva);
                
                
                
                
            }
        }catch(SQLException e){
            System.out.println("Error al obtener datos del producto "+e);
        }
    }
    private double CalcularIva(double precio, int porcentajeIva){
        int p_iva= porcentajeIva;
        
        switch (p_iva){
            case 0:
                iva=0.0;
                break;
            case 12:
                iva=(precio * cantidad)*0.12;
                break;
            case 14:
                iva=(precio * cantidad)*0.14;
                break;
            default:
                break;
        }
        return iva;
    }
    
    private void CalcularTotalPagar(){
        subtotalGeneral=0;
        descuentoGeneral=0;
        ivaGeneral=0;
        totalPagarGeneral=0;
        
        for(detalle_factura elemento : listaProducto){
            subtotalGeneral += elemento.getSubtotal();
            descuentoGeneral += elemento.getDescuento();
            ivaGeneral += elemento.getIva();
            totalPagarGeneral += elemento.getTotalPagar();
        }
        subtotalGeneral = (double) Math.round(subtotalGeneral*100)/100;
        descuentoGeneral = (double) Math.round(descuentoGeneral*100)/100;
        ivaGeneral = (double) Math.round(ivaGeneral*100)/100;
        totalPagarGeneral = (double) Math.round(totalPagarGeneral*100)/100;
        
        txt_subtotal.setText(String.valueOf(subtotalGeneral));
        txt_descuento.setText(String.valueOf(descuentoGeneral));
        txt_iva.setText(String.valueOf(ivaGeneral));
        txt_total_pagar.setText(String.valueOf(totalPagarGeneral));
        
    }
    private void ObtenerIdCliente(){
        try{
            String sql="select * from cliente where concat (nombre,' ',apellido)='" + this.jComboBox_cliente.getSelectedItem()+ "'";
            Connection cn = sistema_facturacion.Conexion.conectaBD();
            Statement st;
            st=cn.createStatement();
            ResultSet rs=st.executeQuery(sql);
            while(rs.next()){
              idCliente=rs.getInt("id_cliente");
            }
            
            
        }catch(SQLException e){
            System.out.println("Error al obtener ID");
        }
    }
    private void RestarStock(int idProducto, int cantidad){
        int cantidadProductos =0;
        
        try{
            Connection cn = sistema_facturacion.Conexion.conectaBD();
            String sql="select id_producto, cantidad from productos where id_producto= '"+idProducto + "'";
            Statement st;
            st=cn.createStatement();
            ResultSet rs=st.executeQuery(sql);
            while(rs.next()){
                cantidadProductos = rs.getInt("cantidad");
                
            }
            cn.close();
            
        }catch(SQLException e){
            System.out.println("Error al actualizar Stock");
            
    }
        try{
            Connection cn = sistema_facturacion.Conexion.conectaBD();
            PreparedStatement consulta = cn.prepareStatement("update productos set cantidad=? where id_producto= '" +idProducto+ "'");
            int cantidadNueva = cantidadProductos -cantidad;
            consulta.setInt(1, cantidadNueva);
            if(consulta.executeUpdate()>0){
                System.out.println(" Actualizado ");
            }
            cn.close();
        }catch(SQLException e){
            System.out.println("Error al actualizar Stock 2"+e);
        }
    }


}
